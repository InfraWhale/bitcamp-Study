@ git에서 clone 하는 과정

그림 1

$ USER_HOME은 실제로 찾을라면 안보이는 폴더 => 예를 들면 아파트에서 공용공간같은 개념. 실제론 33평인데 집 들가면 28평 이게 USER_HOME (C:\Users).
 나머지 5평은 윈도우꺼
마찬가지로 $ JAVA_HOME : (C:\tools\graalvm-ce-java17-windows-amd64-21.3.0\graalvm-ce-java17-21.3.0)

보통은 $ USER_HOME 아래에 깃 저장소 만드는게 보통임 (C:\Users\bitcamp\git)
.git 안에 저장되는 파일들
이곳에 저장되는 파일들은 분산되어 저장됨. 그래서 직접 열어보면 안보임. 
이를 꺼내려면 git client 필요. 다시 합쳐서 복원하는 역할(백업된 파일을 편집할 수 있도록 작업 디렉토리로 꺼냄) 
- 그냥 하면 파일 크기가 너무 커짐. 것도 모든 내용이 있는것이 아닌 수정사항, 수정시간 위주로 저장됨.

. git에서 꺼낼땐 checkout, 다시 넣을땐 commit이라 함.


><개발자가 맥북쓰는이유? 맥 용 앱 개발하려면 사야됨.



@ add / commit / push의 관계

그림 2

파일을 커밋하기 전엔 무조건 add(스테이지 - 백업명단 안에 등록) 한 후 
commit함 : 작업 디렉토리에 있는 파일 중 백업 명단에 등록된 파일을 로컬 저장소에 보관함.

무조건 이 순서를 따라야 commit이 가능함.

그 후 push : 로컬 저장소의 내용을 서버 저장소에 업로드

><작업폴더에서 서버 저장소로의 push는 불가능함.



@ push /pull  // 충돌 및 병합

그림 3

동일한 파일을 pull을 한 경우 여러 개발자가 동시에 원본을 수정한 ver 2를 올릴 수는 없음. 나중에 올린 사람은 ver 2를 다시 pull 한 후 자신의 파일과 merge하여 ver 3를 만들어 push 해야함.


>< 예전엔 1인 super 개발자 위주 =(agile)=> 지금은 팀 위주 . 현재의 코드는 몇천 몇만줄 단위로 가기 때문에.



>< 명령어 cd .. : 다시 상위폴더로 돌아가는거

https://github.com/orgs/eomcs/repositories

eomcs-java
https://github.com/eomcs/eomcs-java.git
eomcs-docs
https://github.com/eomcs/eomcs-docs.git
 두개 사용할거

https://github.com/eomjinyoung?tab=repositories

bitcamp-20211108
https://github.com/eomjinyoung/bitcamp-20211108.git


@첫 코드

><자바의 파일명은 보통 대문자로 시작

왼쪽 탭에 있는 plugin에 있는
Extension Pack for Java v0.18.6 - 이것도 설치해주자
d2coding 폰트 - 이거도 설치


설정 및 이클립스 17 플러그인 설치
>< Whitespace = space + tab + enter

구글 이클립스 스타일 가이드
https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml


@어플리케이션 빌드와 실행
그림 4
 1. 인터프리터 방식
개발자가 명령문 작성하고, 이를 해석하는 해석기(Interpreter)를 통해 운영체제에 전달하고 실행
명령문 작성 언어를 programming language 라 함. programming은 컴퓨터가 해야할 일을 기술하는것

ex) js개발자가 명령문 작성 Hello.js => v8 js inerpreter가 해석하여 os에 전달하여 실행

소스 파일이 있어야 함
인터프리터가 설치되어 있어야 함
실행할 때마다 문법검사 수행 =>컴파일 방식에 비해 실행속도 느림
인터프리터만 설치되어 있다면 os와 cpu에 상관없이 실행 가능

@V8 자바스크립트 엔진과 Node.js
v8 자바스크립트 엔진 // 크롬엔 2개의 핵심엔진이 있음 : V8과 webkit
webkit은 html,css 처리
v8은 js  처리. 하지만 그냥 js 파일로는 안되고 html파일 안에 <script>태그 안에 js 코드로만 가능함. js가 html에 같혀있는 셈.
자바스크립트를 자유롭게 하기 위해 존재하는것이 NodeJS. V8 오픈소스 엔진 탑재. 이건 .js 파일을 일반 프로그래밍 언어처럼 CLI 환경에서 바로 실행가능함. 

 2. 컴파일방식
명령문 작성하면 번역기(컴파일러)를 통해 기계어로 바뀌고 이를 실행시킴

ex) c/c++ 개발자가 명령문 작성 Hello.c & Hello.cpp => 컴파일러로 전달하고 여기서 문법검사 , 최적화를 함 => .exe로 기계어가 나오고  실행 
// 인터프리터 방식보다 실행속도 빠름, 그러나 기계어로 바꾸기 때문에 os나 cpu가 다르면 실행 불가.

cpu + os에 맞는 바뀐 기계어(실행파일)를 가지고 있으면 실행 가능
소스와 컴파일러가 필요 없다


@ cpu와 명령어

1. cpu마다 명령어가 다르다.
ex)  인텔 cpu는 인텔 cpu가 이해할 수 있는 명령어로 작성한 명령문만 가능 - i7, i9

      amd cpu는 인텔 cpu 명령문을 처리할 수 있게 만들었음 (인텔 호환 cpu) - 라이젠

      인텔용 프로그램을 따로 변환할 필요 없이 그대로 실행가능

ex2) arm cpu (애플서 만든거 - m1, m1pro, m1max) (삼성 - 엑시도스) 
       
      인텔 명령문은 실행 불가. arm cpu가 이해할 수 있는 명령어로 작성되야 함.


@ cpu와 os

윈도우 11의 경우(인텔 cpu 기계어로 번역한) 인텔 cpu서는 기동.

만약 마소서 amd cpu에서 윈 11 돌아가게끔 따로 만들지 않는 이상 원래는 돌릴 수 없음.

하지만 amd cpu는 애초에 인텔과 호환되게 만들어서 윈 11 가능함. => 인텔 cpu명령을 그대로 실행할 수 있음.


arm의 경우 cpu 명령이 다르기 때문에, 기존의 인텔용 윈도우를 arm cpu에서 실행할 수 없음. 윈11과 호환이 되지 않음 
=> 그래서 제공되는 arm 윈도우를 따로 깔아야 함. ex) windows 11 on arm


@ 인텔 cpu, arm cpu

1. 동일한 intel cpu에 하나는 win11, 다른 하나는 리눅스 깔림.
app은 같은 인텔 cpu 명령어를 사용하고, 윈도우 11의 포멧에 맞춰 명령어를 나열함.
 앱 : (*.c 명령문을 컴파일하고, 인텔 cpu명령어로 바꿈.)

이 경우 같은 app이 실행 가능함? => 불가능함.

예를 들자면,  한글로 이력서를 작성하여 삼성에 내고, 엘지에 냄. 두 회사 모두 한국어를 씀. 하지만 삼성은 받아주나 엘지는 안받아줌.
삼성 이력서 폼을 받아서 두 회사에 뿌려버려서. 

즉, 기계어가 인텔 cpu 명령어인 것은 맞으나, 리눅스가 원하는 포멧으로 명령어가 나열되지 않았고, 리눅스에 없는 윈도우 가능을 이용한 명령이 들어있음.
실행이 되지 않음.

===========================================================================================

각각 다른 호환성의 cpu에 같은 win 11이 깔림

이 경우 같은 app이 실행 가능함?

명령어가 다름. 명령어 포멧은 같음.

명령어를 작성한 후 컴파일을 통해 번역함. 하지만 이건 인텔 cpu용 명령, win 11 포멧임. 즉 arm에선 실행조자 될 수 없음.


@ c로 컴파일

Hello.c (소스 파일) => gcc.exe(컴파일러)로 번역

=>hello.exe(기계어 파일)가 만들어짐

$gcc -o Hello.exe Hello.c

인터프리터 방식은 소스파일 무조건 줘야 되고, 컴파일 방식은 실행 파일만 주면 됨.


@ 컴파일, os, cpu 총정리.
그림 참고

@ 안드로이드 앱과 os, cpu
그림 참고

그냥 제작 후 플레이스토어에 올려놓음

다운받을 때 먼저 컴파일이 되고, 그 다음에 다운받는 방식임.

>< 팹리스 : 설계도만 만드는 업체
>< 파운드리 : 설계도 받아서 만드는 업체

@ Application 빌드와 실행 / 자바의 경우 : 하이브리드 방식. 컴파일 방식과 인터프리터 방식이 합쳐짐.
그림 5


@ 인터프리터 용어정리

인터프리터 : Engine, VM, player, Runtime Engine(Runtime) 라고도 함.




















Microsoft Windows [Version 10.0.19042.1348]
(c) Microsoft Corporation. All rights reserved.

C:\Users\bitcamp>java -version
openjdk version "17.0.1" 2021-10-19
OpenJDK Runtime Environment GraalVM CE 21.3.0 (build 17.0.1+12-jvmci-21.3-b05)
OpenJDK 64-Bit Server VM GraalVM CE 21.3.0 (build 17.0.1+12-jvmci-21.3-b05, mixed mode, sharing)

C:\Users\bitcamp>javac -version
javac 17.0.1

C:\Users\bitcamp>cd git

C:\Users\bitcamp\git>git clone https://github.com/InfraWhale/bitcamp-20211108
Cloning into 'bitcamp-20211108'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 12 (delta 2), reused 7 (delta 1), pack-reused 0
Receiving objects: 100% (12/12), done.
Resolving deltas: 100% (2/2), done.

C:\Users\bitcamp\git>git clone https://github.com/InfraWhale/bitcamp-Study
Cloning into 'bitcamp-Study'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 12 (delta 2), reused 7 (delta 1), pack-reused 0
Receiving objects: 100% (12/12), done.
Resolving deltas: 100% (2/2), done.

C:\Users\bitcamp\git>git clone https://github.com/eomcs/eomcs-java.git
Cloning into 'eomcs-java'...
remote: Enumerating objects: 18675, done.
remote: Counting objects: 100% (5140/5140), done.
remote: Compressing objects: 100% (3382/3382), done.
remote: Total 18675 (delta 1850), reused 4204 (delta 1387), pack-reused 13535
Receiving objects: 100% (18675/18675), 5.69 MiB | 1.62 MiB/s, done.
Resolving deltas: 100% (8498/8498), done.

C:\Users\bitcamp\git>git clone https://github.com/eomcs/eomcs-docs.git
Cloning into 'eomcs-docs'...
remote: Enumerating objects: 257, done.
remote: Counting objects: 100% (257/257), done.
remote: Compressing objects: 100% (196/196), done.R
remote: Total 257 (delta 113), reused 197 (delta 56), pack-reused 0
Receiving objects: 100% (257/257), 47.51 MiB | 19.60 MiB/s, done.
Resolving deltas: 100% (113/113), done.

C:\Users\bitcamp\git>cd bitcamp-Study

C:\Users\bitcamp\git\bitcamp-Study>javac Hello.java

C:\Users\bitcamp\git\bitcamp-Study>java Hello
Error: Could not find or load main class Hello
Caused by: java.lang.ClassNotFoundException: Hello

C:\Users\bitcamp\git\bitcamp-Study>java Hello
Error: Could not find or load main class Hello
Caused by: java.lang.ClassNotFoundException: Hello

C:\Users\bitcamp\git\bitcamp-Study>cd git
지정된 경로를 찾을 수 없습니다.

C:\Users\bitcamp\git\bitcamp-Study>cd ..

C:\Users\bitcamp\git>cd bitcamp-20211108
지정된 경로를 찾을 수 없습니다.

C:\Users\bitcamp\git>git clone https://github.com/eomjinyoung/bitcamp-20211108.git
Cloning into 'bitcamp-20211108'...
remote: Enumerating objects: 31, done.
remote: Counting objects: 100% (31/31), done.
remote: Compressing objects: 100% (21/21), done.
Receiving objects:  70% (22/31)used 24 (delta 7), pack-reused 0
Receiving objects: 100% (31/31), 6.50 MiB | 26.51 MiB/s, done.
Resolving deltas: 100% (10/10), done.

C:\Users\bitcamp\git>java -version
openjdk version "17.0.1" 2021-10-19
OpenJDK Runtime Environment GraalVM CE 21.3.0 (build 17.0.1+12-jvmci-21.3-b05)
OpenJDK 64-Bit Server VM GraalVM CE 21.3.0 (build 17.0.1+12-jvmci-21.3-b05, mixed mode, sharing)

C:\Users\bitcamp\git>javac -version
javac 17.0.1

C:\Users\bitcamp\git>cd bitcamp-20211108

C:\Users\bitcamp\git\bitcamp-20211108>bit pull
'bit'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는
배치 파일이 아닙니다.

C:\Users\bitcamp\git\bitcamp-20211108>git pull
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (1/1), done.
remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0
Unpacking objects: 100% (3/3), 1.17 MiB | 1.33 MiB/s, done.
From https://github.com/eomjinyoung/bitcamp-20211108
   7bce5b4..5ba1ac0  main       -> origin/main
Updating 7bce5b4..5ba1ac0
Fast-forward
 ...36\230\353\260\215\354\244\200\353\271\204.pdf" | Bin 7701950 -> 9956512 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)

C:\Users\bitcamp\git\bitcamp-20211108>












Microsoft Windows [Version 10.0.19042.1348]
(c) Microsoft Corporation. All rights reserved.

C:\Users\bitcamp>cd git

C:\Users\bitcamp\git>cd bitcamp-Study

C:\Users\bitcamp\git\bitcamp-Study>javac Hello.java
Hello.java:5: error: unmappable character (0x80) for encoding x-windows-949
        // 媛??굹?떎     :
            ^
Hello.java:5: error: unmappable character (0xEB) for encoding x-windows-949
        // 媛??굹?떎     :
             ^
Hello.java:5: error: unmappable character (0xEB) for encoding x-windows-949
        // 媛??굹?떎     :
               ^
Hello.java:6: error: unmappable character (0x80) for encoding x-windows-949
        // a媛??굹?떎    :
             ^
Hello.java:6: error: unmappable character (0xEB) for encoding x-windows-949
        // a媛??굹?떎    :
              ^
Hello.java:6: error: unmappable character (0xEB) for encoding x-windows-949
        // a媛??굹?떎    :
                ^
Hello.java:7: error: unmappable character (0x80) for encoding x-windows-949
        // abc 媛??굹?떎 :
                ^
Hello.java:7: error: unmappable character (0xEB) for encoding x-windows-949
        // abc 媛??굹?떎 :
                 ^
Hello.java:7: error: unmappable character (0xEB) for encoding x-windows-949
        // abc 媛??굹?떎 :
                   ^
9 errors

C:\Users\bitcamp\git\bitcamp-Study>javac Hello.java

C:\Users\bitcamp\git\bitcamp-Study>java Hello
Hello, world!

C:\Users\bitcamp\git\bitcamp-Study>

Microsoft Windows [Version 10.0.19042.1348]
(c) Microsoft Corporation. All rights reserved.

C:\Users\bitcamp>cd git

C:\Users\bitcamp\git>cd bitcamp-Study

C:\Users\bitcamp\git\bitcamp-Study>gcc -o Hello.exe Hello.c
/usr/lib/gcc/x86_64-pc-cygwin/11/../../../../x86_64-pc-cygwin/bin/ld: /usr/lib/gcc/x86_64-pc-cygwin/11/../../../../lib/libcygwin.a(libcmain.o): in function `main':
/usr/src/debug/cygwin-3.3.2-1/winsup/cygwin/lib/libcmain.c:37: undefined reference to `WinMain'
collect2: error: ld returned 1 exit status

C:\Users\bitcamp\git\bitcamp-Study>Hello

C:\Users\bitcamp\git\bitcamp-Study>gcc  -o Hello.exe Hello.c
/usr/lib/gcc/x86_64-pc-cygwin/11/../../../../x86_64-pc-cygwin/bin/ld: /usr/lib/gcc/x86_64-pc-cygwin/11/../../../../lib/libcygwin.a(libcmain.o): in function `main':
/usr/src/debug/cygwin-3.3.2-1/winsup/cygwin/lib/libcmain.c:37: undefined reference to `WinMain'
collect2: error: ld returned 1 exit status

C:\Users\bitcamp\git\bitcamp-Study>javac Hello,java
error: invalid flag: Hello,java
Usage: javac <options> <source files>
use --help for a list of possible options

C:\Users\bitcamp\git\bitcamp-Study>javac Hello,java
error: invalid flag: Hello,java
Usage: javac <options> <source files>
use --help for a list of possible options

C:\Users\bitcamp\git\bitcamp-Study>javac Hello,java
error: invalid flag: Hello,java
Usage: javac <options> <source files>
use --help for a list of possible options

C:\Users\bitcamp\git\bitcamp-Study>javac Hello,java
error: invalid flag: Hello,java
Usage: javac <options> <source files>
use --help for a list of possible options

C:\Users\bitcamp\git\bitcamp-Study>javac Hello.java

C:\Users\bitcamp\git\bitcamp-Study>java Hello
Hello, world!1
Hello, world!2

C:\Users\bitcamp\git\bitcamp-Study>gcc -o Hello.exe Hello.c
/usr/lib/gcc/x86_64-pc-cygwin/11/../../../../x86_64-pc-cygwin/bin/ld: /usr/lib/gcc/x86_64-pc-cygwin/11/../../../../lib/libcygwin.a(libcmain.o): in function `main':
/usr/src/debug/cygwin-3.3.2-1/winsup/cygwin/lib/libcmain.c:37: undefined reference to `WinMain'
collect2: error: ld returned 1 exit status

C:\Users\bitcamp\git\bitcamp-Study>gcc -o Hello.exe Hello.c

C:\Users\bitcamp\git\bitcamp-Study>Hello
Hello, world!

C:\Users\bitcamp\git\bitcamp-Study>




